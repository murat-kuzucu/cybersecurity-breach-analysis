import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path
import os

def analyze_resolution_vulnerability():
    """
    Analyzes resolution times and vulnerabilities in cybersecurity breaches.
    Uses snake_case for function names and camelCase for variable names.
    """
    print("Starting resolution time and vulnerability analysis...")
    
    # Create output directory if it doesn't exist
    outputDir = Path('analysis/output')
    outputDir.mkdir(exist_ok=True, parents=True)
    
    # Load the enhanced data
    dataPath = Path('../Enhanced_Cybersecurity_Data.csv')
    try:
        df = pd.read_csv(dataPath)
        print(f"Loaded data with {len(df)} records")
    except Exception as e:
        print(f"Error loading data: {e}")
        return
    
    # Set the style for all visualizations
    sns.set_style("whitegrid")
    plt.rcParams['font.family'] = 'sans-serif'
    plt.rcParams['font.sans-serif'] = 'Arial'
    
    # 1. Resolution Time by Industry
    plt.figure(figsize=(12, 8))
    resTimeByIndustry = df.groupby('Target Industry Standardized')['Incident Resolution Time (in Hours)'].mean().sort_values(ascending=False)
    
    # Create bar chart
    ax = sns.barplot(x=resTimeByIndustry.index, y=resTimeByIndustry.values, palette='mako')
    plt.title('Average Resolution Time by Industry', fontsize=16, pad=20)
    plt.xlabel('Industry', fontsize=14)
    plt.ylabel('Average Resolution Time (Hours)', fontsize=14)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    
    # Add value labels
    for i, v in enumerate(resTimeByIndustry.values):
        ax.text(i, v + 1, f'{v:.1f}', ha='center', fontsize=10)
    
    # Save the figure
    plt.savefig(outputDir / 'resolution_time_by_industry.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # 2. Resolution Time by Attack Type
    plt.figure(figsize=(14, 8))
    resTimeByAttack = df.groupby('Attack Type Detailed')['Incident Resolution Time (in Hours)'].mean().sort_values(ascending=False)
    
    # Create bar chart
    ax = sns.barplot(x=resTimeByAttack.index, y=resTimeByAttack.values, palette='viridis')
    plt.title('Average Resolution Time by Attack Type', fontsize=16, pad=20)
    plt.xlabel('Attack Type', fontsize=14)
    plt.ylabel('Average Resolution Time (Hours)', fontsize=14)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    
    # Add value labels
    for i, v in enumerate(resTimeByAttack.values):
        ax.text(i, v + 1, f'{v:.1f}', ha='center', fontsize=10)
    
    # Save the figure
    plt.savefig(outputDir / 'resolution_time_by_attack.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # 3. Resolution Time Distribution
    plt.figure(figsize=(12, 8))
    df['Resolution Time Category'] = pd.Categorical(
        df['Resolution Time Category'],
        categories=[
            'Less than 24 hours', 
            '1-3 days', 
            '4-7 days', 
            '1-2 weeks', 
            '2-4 weeks', 
            '1-3 months', 
            'More than 3 months'
        ],
        ordered=True
    )
    
    resCatCount = df['Resolution Time Category'].value_counts().sort_index()
    
    # Create bar chart
    ax = sns.barplot(x=resCatCount.index, y=resCatCount.values, palette='rocket')
    plt.title('Distribution of Incident Resolution Times', fontsize=16, pad=20)
    plt.xlabel('Resolution Time', fontsize=14)
    plt.ylabel('Number of Incidents', fontsize=14)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    
    # Add value labels
    for i, v in enumerate(resCatCount.values):
        ax.text(i, v + 10, str(v), ha='center', fontsize=10)
    
    # Save the figure
    plt.savefig(outputDir / 'resolution_time_distribution.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # 4. Resolution Time by Defense Mechanism
    plt.figure(figsize=(12, 8))
    resTimeByDefense = df.groupby('Defense Mechanism Used')['Incident Resolution Time (in Hours)'].mean().sort_values(ascending=False)
    
    # Create bar chart
    ax = sns.barplot(x=resTimeByDefense.index, y=resTimeByDefense.values, palette='crest')
    plt.title('Average Resolution Time by Defense Mechanism', fontsize=16, pad=20)
    plt.xlabel('Defense Mechanism', fontsize=14)
    plt.ylabel('Average Resolution Time (Hours)', fontsize=14)
    plt.tight_layout()
    
    # Add value labels
    for i, v in enumerate(resTimeByDefense.values):
        ax.text(i, v + 1, f'{v:.1f}', ha='center', fontsize=10)
    
    # Save the figure
    plt.savefig(outputDir / 'resolution_time_by_defense.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # 5. Correlation between Resolution Time and Financial Loss
    plt.figure(figsize=(10, 8))
    sns.scatterplot(
        data=df, 
        x='Incident Resolution Time (in Hours)', 
        y='Financial Loss (in Million $)',
        hue='Attack Type',
        size='Number of Affected Users',
        sizes=(20, 200),
        alpha=0.7
    )
    plt.title('Correlation: Resolution Time vs. Financial Loss', fontsize=16, pad=20)
    plt.xlabel('Resolution Time (Hours)', fontsize=14)
    plt.ylabel('Financial Loss (Million $)', fontsize=14)
    plt.grid(True, alpha=0.3)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    
    # Save the figure
    plt.savefig(outputDir / 'resolution_vs_financial_loss.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # 6. Vulnerability Distribution
    plt.figure(figsize=(10, 8))
    vulnCounts = df['Security Vulnerability Type'].value_counts()
    explode = [0.1 if i == 0 else 0.05 if i == 1 else 0 for i in range(len(vulnCounts))]
    
    # Create pie chart
    plt.pie(vulnCounts, labels=vulnCounts.index, autopct='%1.1f%%', 
            startangle=90, explode=explode, shadow=True, textprops={'fontsize': 12})
    plt.title('Distribution of Security Vulnerabilities', fontsize=16, pad=20)
    plt.axis('equal')
    plt.tight_layout()
    
    # Save the figure
    plt.savefig(outputDir / 'vulnerability_distribution.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # 7. Vulnerability by Industry Heatmap
    plt.figure(figsize=(12, 8))
    # Create contingency table
    vulnIndustryTable = pd.crosstab(df['Target Industry Standardized'], df['Security Vulnerability Type'])
    
    # Convert to percentages
    vulnIndustryTablePct = vulnIndustryTable.div(vulnIndustryTable.sum(axis=1), axis=0) * 100
    
    # Create heatmap
    sns.heatmap(vulnIndustryTablePct, annot=True, cmap='YlGnBu', fmt='.1f', linewidths=.5)
    plt.title('Security Vulnerability Distribution by Industry (%)', fontsize=16, pad=20)
    plt.tight_layout()
    
    # Save the figure
    plt.savefig(outputDir / 'vulnerability_by_industry.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # Generate summary report
    with open(outputDir / 'resolution_vulnerability_summary.md', 'w') as f:
        f.write("# Resolution Time and Vulnerability Analysis Summary\n\n")
        
        f.write("## Resolution Time Statistics\n")
        f.write(f"- Average resolution time: {df['Incident Resolution Time (in Hours)'].mean():.1f} hours\n")
        f.write(f"- Median resolution time: {df['Incident Resolution Time (in Hours)'].median():.1f} hours\n")
        f.write(f"- Minimum resolution time: {df['Incident Resolution Time (in Hours)'].min():.1f} hours\n")
        f.write(f"- Maximum resolution time: {df['Incident Resolution Time (in Hours)'].max():.1f} hours\n\n")
        
        f.write("## Industries with Longest Resolution Times (Hours)\n")
        for industry, time in resTimeByIndustry.head(3).items():
            f.write(f"- {industry}: {time:.1f} hours\n")
        f.write("\n")
        
        f.write("## Attack Types with Longest Resolution Times (Hours)\n")
        for attack, time in resTimeByAttack.head(3).items():
            f.write(f"- {attack}: {time:.1f} hours\n")
        f.write("\n")
        
        f.write("## Most Common Security Vulnerabilities\n")
        for vuln, count in vulnCounts.head(3).items():
            f.write(f"- {vuln}: {count} incidents ({count/len(df)*100:.1f}%)\n")
        f.write("\n")
        
        f.write("## Relationship Between Resolution Time and Financial Loss\n")
        correlation = df['Incident Resolution Time (in Hours)'].corr(df['Financial Loss (in Million $)'])
        f.write(f"- Correlation coefficient: {correlation:.3f}\n")
        if correlation > 0.5:
            f.write("- Strong positive correlation: Higher resolution times tend to result in higher financial losses\n")
        elif correlation > 0.2:
            f.write("- Moderate positive correlation: Higher resolution times typically result in somewhat higher financial losses\n")
        elif correlation > 0:
            f.write("- Weak positive correlation: Resolution time has a slight positive relationship with financial loss\n")
        else:
            f.write("- Negative or no correlation: Resolution time does not appear to directly increase financial loss\n")
    
    print("Resolution time and vulnerability analysis completed successfully!")

if __name__ == "__main__":
    analyze_resolution_vulnerability()
